import {
  EXTEND_MODEL_NAME,
  IMPORT_LIBRARY,
  INSTANCE_NAME,
  INTERFACE_NAME,
  REPOSITORY_TYPE,
  TYPES_NAMES,
} from '../utils/constants';

const baseRepository = `/* eslint-disable @typescript-eslint/ban-ts-comment */
// Keep in mind that this file is automatically generated.
// You can change the content of this file, but it will be overwritten.

${IMPORT_LIBRARY.LODASH}
${IMPORT_LIBRARY.PRISMA}
import { ${INSTANCE_NAME.MODELS}, ${TYPES_NAMES.MODEL_NAME}, ${TYPES_NAMES.MODEL_STRUCTURE}, ${TYPES_NAMES.MODEL_SCALAR_FIELDS}, ${INTERFACE_NAME.ANY_RECORD}, ${INTERFACE_NAME.FIND}, ${INTERFACE_NAME.BASE_OPTION} } from './models';

/**
 * @param model - The model name
 * @description ${REPOSITORY_TYPE}
 */

class BaseRepository<${REPOSITORY_TYPE}> {
  constructor(protected model: ${TYPES_NAMES.MODEL_NAME}) {
    this.model = model;
  }

  async findAll<${EXTEND_MODEL_NAME}>(
    conditions: Where,
    filterQueryParams: AnyRecord = {},
    options: AnyRecord = {},
    include: Include = {} as Include
  ) {
    const limit = +(options.limit === 'all' ? 0 : _.get(options, 'limit', 10));
    const offset = options.page && options.page > 0 ? limit * (options.page - 1) : 0;
    const otherOptions = _.omit(options, ['limit', 'offset', 'page']);

    const where = { ...conditions, ...filterQueryParams, ...otherOptions };

    return {
      // @ts-ignore
      rows: (await ${INSTANCE_NAME.MODELS}[this.model].findMany({
        where,
        ...(!_.isEmpty(include) && { include }),
        skip: offset,
        ...(limit > 0 && { take: limit }),
      })) as ${TYPES_NAMES.MODEL_STRUCTURE}[T][],
      // eslint-disable-next-line no-underscore-dangle
      count: /* @ts-ignore */ (
        await ${INSTANCE_NAME.MODELS}[this.model].aggregate({
          where,
          _count: true,
        })
      )._count as number,
    };
  }

  async findOne<${EXTEND_MODEL_NAME}>(
    conditions: Where | number | string,
    option: Find<
      Select,
      Include,
      Cursor,
      Order,
      ${TYPES_NAMES.MODEL_SCALAR_FIELDS}<typeof this.model>
    > = {}
  ) {
    const dbCond = _.isObject(conditions)
      ? conditions
      : { id: _.toNumber(conditions) };

    // @ts-ignore
    return ${INSTANCE_NAME.MODELS}[this.model].findFirst({
      where: dbCond,
      ...option,
    }) as Promise<${TYPES_NAMES.MODEL_STRUCTURE}[T]>;
  }

  async create<${EXTEND_MODEL_NAME}>(
    data: Create,
    option: BaseOption<Include, Select> = {}
  ) {
    // @ts-ignore
    return ${INSTANCE_NAME.MODELS}[this.model].create({
      data,
      ...option,
    }) as Promise<${TYPES_NAMES.MODEL_STRUCTURE}[T]>;
  }

  async update<${EXTEND_MODEL_NAME}>(
    conditions: Where | number | string,
    data: Update | Create,
    option: BaseOption<Include, Select> = {}
  ) {
    const dbCond = _.isObject(conditions) ? conditions : { id: _.toNumber(conditions) };

    // @ts-ignore
    return ${INSTANCE_NAME.MODELS}[this.model].update({
      data,
      where: dbCond,
      ...option,
    }) as Promise<${TYPES_NAMES.MODEL_STRUCTURE}[T]>;
  }

  async delete(conditions: Where | number | string) {
    const dbCond = _.isObject(conditions) ? conditions : { id: _.toNumber(conditions) };

    // @ts-ignore
    return ${INSTANCE_NAME.MODELS}[this.model].deleteMany({
      where: dbCond,
    });
  }

  async findOrCreate(
    conditions: Where | number | string,
    data: Create,
    option: Find<Select, Include, Cursor, Order, ${TYPES_NAMES.MODEL_SCALAR_FIELDS}<typeof this.model>> = {}
  ) {
    const obj = await this.findOne(conditions, option);

    if (obj) return obj;

    return this.create(data);
  }

  async bulkCreate(data: Prisma.Enumerable<Create>, skipDuplicates = true) {
    // @ts-ignore
    return ${INSTANCE_NAME.MODELS}[this.model].createMany({
      data,
      skipDuplicates,
    });
  }

  async bulkUpdate(where: Where, data: Prisma.Enumerable<Update>) {
    // @ts-ignore
    return ${INSTANCE_NAME.MODELS}[this.model].updateMany({
      data,
      where,
    });
  }
}

const factory = <${REPOSITORY_TYPE}>(model: ${TYPES_NAMES.MODEL_NAME}) =>
  new BaseRepository<${REPOSITORY_TYPE}>(model);

export default factory;
`;

export default baseRepository;
