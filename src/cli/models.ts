import ora from 'ora';
import chalk from 'chalk';
import fs from 'fs/promises';
import { importer, interfaces, prismaInstance } from '../template/models';
import {
  generateModelStructures,
  getAllModelName,
  generateModelsPrismaTypes,
  getAllModelTypes,
  generateModelNameConstants,
} from '../utils/models';
import { MODEL_NAME, MODEL_SCALAR_FIELDS } from '../utils/constants';

const createModelStructures = async (prisma: string) => {
  const spinner = ora('Creating model structures..\n.').start();

  try {
    const modelNames = getAllModelName(prisma);
    const modelNameConstants = generateModelNameConstants(modelNames);
    const modelStructures = generateModelStructures(modelNames);
    const modelsTypes = getAllModelTypes(prisma, modelNames);
    const modelsPrismaTypes = generateModelsPrismaTypes(modelNames, modelsTypes);

    let models =
      '//! Do not edit this file manually, it is generate by `prisma repo generator`\n\n';

    models += `${importer.lodash}\n`;
    models += `${importer.start} `;
    models += modelNames.join(', ');
    models += ` ${importer.end}\n\n`;

    models += `${interfaces.anyRecord}\n\n`;
    models += `${interfaces.baseOption}\n\n`;
    models += `${interfaces.find}\n\n`;

    models += `${prismaInstance.prisma}\n\n`;
    models += `${prismaInstance.models}\n\n`;

    models += `${modelNameConstants}\n\n`;

    models += `${modelStructures}\n\n`;
    models += `${MODEL_NAME}\n\n`;
    models += `${MODEL_SCALAR_FIELDS}\n\n`;

    models += `${modelsPrismaTypes}\n`;

    await fs.writeFile('./src/models.ts', models);

    spinner.succeed(chalk.green.bold('Model structures created'));
  } catch {
    spinner.fail(chalk.red.bold('Model structures creation failed'));
  }
};

export default createModelStructures;
